# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CurrentLifter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, division: str=None, _class: str=None, sex: str=None, age: float=None, bodyweight_kg: float=None):  # noqa: E501
        """CurrentLifter - a model defined in Swagger

        :param name: The name of this CurrentLifter.  # noqa: E501
        :type name: str
        :param division: The division of this CurrentLifter.  # noqa: E501
        :type division: str
        :param _class: The _class of this CurrentLifter.  # noqa: E501
        :type _class: str
        :param sex: The sex of this CurrentLifter.  # noqa: E501
        :type sex: str
        :param age: The age of this CurrentLifter.  # noqa: E501
        :type age: float
        :param bodyweight_kg: The bodyweight_kg of this CurrentLifter.  # noqa: E501
        :type bodyweight_kg: float
        """
        self.swagger_types = {
            'name': str,
            'division': str,
            '_class': str,
            'sex': str,
            'age': float,
            'bodyweight_kg': float
        }

        self.attribute_map = {
            'name': 'name',
            'division': 'division',
            '_class': 'class',
            'sex': 'sex',
            'age': 'age',
            'bodyweight_kg': 'bodyweightKg'
        }
        self._name = name
        self._division = division
        self.__class = _class
        self._sex = sex
        self._age = age
        self._bodyweight_kg = bodyweight_kg

    @classmethod
    def from_dict(cls, dikt) -> 'CurrentLifter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CurrentLifter of this CurrentLifter.  # noqa: E501
        :rtype: CurrentLifter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CurrentLifter.


        :return: The name of this CurrentLifter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CurrentLifter.


        :param name: The name of this CurrentLifter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def division(self) -> str:
        """Gets the division of this CurrentLifter.


        :return: The division of this CurrentLifter.
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division: str):
        """Sets the division of this CurrentLifter.


        :param division: The division of this CurrentLifter.
        :type division: str
        """

        self._division = division

    @property
    def _class(self) -> str:
        """Gets the _class of this CurrentLifter.


        :return: The _class of this CurrentLifter.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """Sets the _class of this CurrentLifter.


        :param _class: The _class of this CurrentLifter.
        :type _class: str
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")  # noqa: E501

        self.__class = _class

    @property
    def sex(self) -> str:
        """Gets the sex of this CurrentLifter.


        :return: The sex of this CurrentLifter.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex: str):
        """Sets the sex of this CurrentLifter.


        :param sex: The sex of this CurrentLifter.
        :type sex: str
        """
        if sex is None:
            raise ValueError("Invalid value for `sex`, must not be `None`")  # noqa: E501

        self._sex = sex

    @property
    def age(self) -> float:
        """Gets the age of this CurrentLifter.


        :return: The age of this CurrentLifter.
        :rtype: float
        """
        return self._age

    @age.setter
    def age(self, age: float):
        """Sets the age of this CurrentLifter.


        :param age: The age of this CurrentLifter.
        :type age: float
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")  # noqa: E501

        self._age = age

    @property
    def bodyweight_kg(self) -> float:
        """Gets the bodyweight_kg of this CurrentLifter.


        :return: The bodyweight_kg of this CurrentLifter.
        :rtype: float
        """
        return self._bodyweight_kg

    @bodyweight_kg.setter
    def bodyweight_kg(self, bodyweight_kg: float):
        """Sets the bodyweight_kg of this CurrentLifter.


        :param bodyweight_kg: The bodyweight_kg of this CurrentLifter.
        :type bodyweight_kg: float
        """
        if bodyweight_kg is None:
            raise ValueError("Invalid value for `bodyweight_kg`, must not be `None`")  # noqa: E501

        self._bodyweight_kg = bodyweight_kg

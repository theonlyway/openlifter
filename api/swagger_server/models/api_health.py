# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiHealth(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, api_status: str=None, database_status: str=None, failure_message: str=None):  # noqa: E501
        """ApiHealth - a model defined in Swagger

        :param api_status: The api_status of this ApiHealth.  # noqa: E501
        :type api_status: str
        :param database_status: The database_status of this ApiHealth.  # noqa: E501
        :type database_status: str
        :param failure_message: The failure_message of this ApiHealth.  # noqa: E501
        :type failure_message: str
        """
        self.swagger_types = {
            'api_status': str,
            'database_status': str,
            'failure_message': str
        }

        self.attribute_map = {
            'api_status': 'apiStatus',
            'database_status': 'databaseStatus',
            'failure_message': 'failureMessage'
        }
        self._api_status = api_status
        self._database_status = database_status
        self._failure_message = failure_message

    @classmethod
    def from_dict(cls, dikt) -> 'ApiHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApiHealth of this ApiHealth.  # noqa: E501
        :rtype: ApiHealth
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_status(self) -> str:
        """Gets the api_status of this ApiHealth.


        :return: The api_status of this ApiHealth.
        :rtype: str
        """
        return self._api_status

    @api_status.setter
    def api_status(self, api_status: str):
        """Sets the api_status of this ApiHealth.


        :param api_status: The api_status of this ApiHealth.
        :type api_status: str
        """
        if api_status is None:
            raise ValueError("Invalid value for `api_status`, must not be `None`")  # noqa: E501

        self._api_status = api_status

    @property
    def database_status(self) -> str:
        """Gets the database_status of this ApiHealth.


        :return: The database_status of this ApiHealth.
        :rtype: str
        """
        return self._database_status

    @database_status.setter
    def database_status(self, database_status: str):
        """Sets the database_status of this ApiHealth.


        :param database_status: The database_status of this ApiHealth.
        :type database_status: str
        """
        if database_status is None:
            raise ValueError("Invalid value for `database_status`, must not be `None`")  # noqa: E501

        self._database_status = database_status

    @property
    def failure_message(self) -> str:
        """Gets the failure_message of this ApiHealth.


        :return: The failure_message of this ApiHealth.
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message: str):
        """Sets the failure_message of this ApiHealth.


        :param failure_message: The failure_message of this ApiHealth.
        :type failure_message: str
        """

        self._failure_message = failure_message

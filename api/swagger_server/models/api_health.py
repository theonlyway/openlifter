# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiHealth(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, meet: str=None, sub: str=None):  # noqa: E501
        """ApiHealth - a model defined in Swagger

        :param meet: The meet of this ApiHealth.  # noqa: E501
        :type meet: str
        :param sub: The sub of this ApiHealth.  # noqa: E501
        :type sub: str
        """
        self.swagger_types = {
            'meet': str,
            'sub': str
        }

        self.attribute_map = {
            'meet': 'meet',
            'sub': 'sub'
        }
        self._meet = meet
        self._sub = sub

    @classmethod
    def from_dict(cls, dikt) -> 'ApiHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApiHealth of this ApiHealth.  # noqa: E501
        :rtype: ApiHealth
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meet(self) -> str:
        """Gets the meet of this ApiHealth.


        :return: The meet of this ApiHealth.
        :rtype: str
        """
        return self._meet

    @meet.setter
    def meet(self, meet: str):
        """Sets the meet of this ApiHealth.


        :param meet: The meet of this ApiHealth.
        :type meet: str
        """
        if meet is None:
            raise ValueError("Invalid value for `meet`, must not be `None`")  # noqa: E501

        self._meet = meet

    @property
    def sub(self) -> str:
        """Gets the sub of this ApiHealth.


        :return: The sub of this ApiHealth.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub: str):
        """Sets the sub of this ApiHealth.


        :param sub: The sub of this ApiHealth.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")  # noqa: E501

        self._sub = sub
